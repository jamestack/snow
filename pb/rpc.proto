syntax = "proto3";

option go_package = ".;pb";

package pb;

// master rpc
service MasterRpc {
    // // 心跳
    // rpc Ping(Empty) returns(Empty);
    // 注册
    rpc Register(RegisterReq) returns(RegisterAck);
    // 挂载节点
    rpc Mount(MountReq) returns(Empty);
    // 移除节点
    rpc UnMount(MountReq) returns(Empty);
    // 同步挂载点
    rpc Sync(stream SyncReq) returns(stream MountLogItem);
}

// peer rpc
service PeerRpc {
    rpc CheckKey(CheckKeyReq) returns(Empty);
    // 远程调用
    rpc Call(CallReq) returns(CallAck);
    // 双向流抽象
    rpc Stream(stream StreamMsg) returns(stream StreamMsg);
    // 取消挂载
    rpc UnMount(NodeName) returns(Empty);
}

message Empty {}

// ============= 注册节点 ============
message RegisterReq {
    string PeerNode = 1;
    string SlaveKey = 2;
    string MasterKey = 3;
}

message RegisterAck {
    string MasterKey = 1;
}

// ============= 挂载 ==============

message MountReq {
    string Name = 1;
}

// ============= 同步挂载点 ===========
message SyncReq {
    int64 Id = 1;
    string Addr = 2;
}
message MountLogItem {
    int64  Id       = 1;
    bool   IsAdd 	= 2;	// 增加为true删除为false
    string Name     = 3;    // 挂载点
    string PeerAddr = 4;    // 节点地址
    int64 Time = 5;
}
message SyncAck {
    repeated MountLogItem List = 1;
}

// ============= 远程调用 =============
message CheckKeyReq {
    string key = 1;
}

message CallReq {
    string ServiceName = 1;
    string NodeName = 2;
    string Method  = 3;
    repeated bytes Args = 4;
}

message CallAck {
    repeated bytes Args = 1;
}

// ============= 流抽象 ==============
message StreamMsg {
    oneof StreamType {
        CallReq Req = 1;
        Bytes Data = 2;
    }
}
message Bytes {
    bytes Bytes = 1;
}

message NodeName {
    string Str = 1;
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: rpc.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{0}
}

// ============= 注册节点 ============
type RegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerNode  string `protobuf:"bytes,1,opt,name=PeerNode,proto3" json:"PeerNode,omitempty"`
	MasterKey int64  `protobuf:"varint,2,opt,name=MasterKey,proto3" json:"MasterKey,omitempty"`
	CheckNum  int64  `protobuf:"varint,3,opt,name=CheckNum,proto3" json:"CheckNum,omitempty"`
}

func (x *RegisterReq) Reset() {
	*x = RegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReq) ProtoMessage() {}

func (x *RegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReq.ProtoReflect.Descriptor instead.
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterReq) GetPeerNode() string {
	if x != nil {
		return x.PeerNode
	}
	return ""
}

func (x *RegisterReq) GetMasterKey() int64 {
	if x != nil {
		return x.MasterKey
	}
	return 0
}

func (x *RegisterReq) GetCheckNum() int64 {
	if x != nil {
		return x.CheckNum
	}
	return 0
}

type RegisterAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterKey int64 `protobuf:"varint,1,opt,name=MasterKey,proto3" json:"MasterKey,omitempty"`
}

func (x *RegisterAck) Reset() {
	*x = RegisterAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAck) ProtoMessage() {}

func (x *RegisterAck) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAck.ProtoReflect.Descriptor instead.
func (*RegisterAck) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterAck) GetMasterKey() int64 {
	if x != nil {
		return x.MasterKey
	}
	return 0
}

type MountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *MountReq) Reset() {
	*x = MountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountReq) ProtoMessage() {}

func (x *MountReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountReq.ProtoReflect.Descriptor instead.
func (*MountReq) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *MountReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ============= 同步挂载点 ===========
type SyncReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *SyncReq) Reset() {
	*x = SyncReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncReq) ProtoMessage() {}

func (x *SyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncReq.ProtoReflect.Descriptor instead.
func (*SyncReq) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *SyncReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type MountLogItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IsAdd    bool   `protobuf:"varint,2,opt,name=IsAdd,proto3" json:"IsAdd,omitempty"`      // 增加为true删除为false
	Name     string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`         // 挂载点
	PeerAddr string `protobuf:"bytes,4,opt,name=PeerAddr,proto3" json:"PeerAddr,omitempty"` // 节点地址
}

func (x *MountLogItem) Reset() {
	*x = MountLogItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountLogItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountLogItem) ProtoMessage() {}

func (x *MountLogItem) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountLogItem.ProtoReflect.Descriptor instead.
func (*MountLogItem) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *MountLogItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MountLogItem) GetIsAdd() bool {
	if x != nil {
		return x.IsAdd
	}
	return false
}

func (x *MountLogItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MountLogItem) GetPeerAddr() string {
	if x != nil {
		return x.PeerAddr
	}
	return ""
}

type SyncAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MountLogItem `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
}

func (x *SyncAck) Reset() {
	*x = SyncAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAck) ProtoMessage() {}

func (x *SyncAck) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAck.ProtoReflect.Descriptor instead.
func (*SyncAck) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *SyncAck) GetList() []*MountLogItem {
	if x != nil {
		return x.List
	}
	return nil
}

// ============= 远程调用 =============
type CheckNumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *CheckNumReq) Reset() {
	*x = CheckNumReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNumReq) ProtoMessage() {}

func (x *CheckNumReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNumReq.ProtoReflect.Descriptor instead.
func (*CheckNumReq) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *CheckNumReq) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type CallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string   `protobuf:"bytes,1,opt,name=ServiceName,proto3" json:"ServiceName,omitempty"`
	NodeName    string   `protobuf:"bytes,2,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
	Method      string   `protobuf:"bytes,3,opt,name=Method,proto3" json:"Method,omitempty"`
	Args        [][]byte `protobuf:"bytes,4,rep,name=Args,proto3" json:"Args,omitempty"`
}

func (x *CallReq) Reset() {
	*x = CallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallReq) ProtoMessage() {}

func (x *CallReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallReq.ProtoReflect.Descriptor instead.
func (*CallReq) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *CallReq) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *CallReq) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *CallReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CallReq) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

type CallAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args [][]byte `protobuf:"bytes,1,rep,name=Args,proto3" json:"Args,omitempty"`
}

func (x *CallAck) Reset() {
	*x = CallAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallAck) ProtoMessage() {}

func (x *CallAck) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallAck.ProtoReflect.Descriptor instead.
func (*CallAck) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *CallAck) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

// ============= 流抽象 ==============
type StreamMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StreamType:
	//	*StreamMsg_Req
	//	*StreamMsg_Data
	StreamType isStreamMsg_StreamType `protobuf_oneof:"StreamType"`
}

func (x *StreamMsg) Reset() {
	*x = StreamMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMsg) ProtoMessage() {}

func (x *StreamMsg) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMsg.ProtoReflect.Descriptor instead.
func (*StreamMsg) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{10}
}

func (m *StreamMsg) GetStreamType() isStreamMsg_StreamType {
	if m != nil {
		return m.StreamType
	}
	return nil
}

func (x *StreamMsg) GetReq() *CallReq {
	if x, ok := x.GetStreamType().(*StreamMsg_Req); ok {
		return x.Req
	}
	return nil
}

func (x *StreamMsg) GetData() *Bytes {
	if x, ok := x.GetStreamType().(*StreamMsg_Data); ok {
		return x.Data
	}
	return nil
}

type isStreamMsg_StreamType interface {
	isStreamMsg_StreamType()
}

type StreamMsg_Req struct {
	Req *CallReq `protobuf:"bytes,1,opt,name=Req,proto3,oneof"`
}

type StreamMsg_Data struct {
	Data *Bytes `protobuf:"bytes,2,opt,name=Data,proto3,oneof"`
}

func (*StreamMsg_Req) isStreamMsg_StreamType() {}

func (*StreamMsg_Data) isStreamMsg_StreamType() {}

type Bytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes []byte `protobuf:"bytes,1,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
}

func (x *Bytes) Reset() {
	*x = Bytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bytes) ProtoMessage() {}

func (x *Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bytes.ProtoReflect.Descriptor instead.
func (*Bytes) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *Bytes) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type NodeName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str string `protobuf:"bytes,1,opt,name=Str,proto3" json:"Str,omitempty"`
}

func (x *NodeName) Reset() {
	*x = NodeName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeName) ProtoMessage() {}

func (x *NodeName) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeName.ProtoReflect.Descriptor instead.
func (*NodeName) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *NodeName) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

// ============= 挂载时间 ===========
type MountTimeAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unix int64 `protobuf:"varint,1,opt,name=Unix,proto3" json:"Unix,omitempty"`
}

func (x *MountTimeAck) Reset() {
	*x = MountTimeAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountTimeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountTimeAck) ProtoMessage() {}

func (x *MountTimeAck) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountTimeAck.ProtoReflect.Descriptor instead.
func (*MountTimeAck) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *MountTimeAck) GetUnix() int64 {
	if x != nil {
		return x.Unix
	}
	return 0
}

var File_rpc_proto protoreflect.FileDescriptor

var file_rpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22,
	0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x63, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x65, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x22, 0x2b, 0x0a,
	0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x22, 0x1e, 0x0a, 0x08, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x07, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f,
	0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x41, 0x64, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x41, 0x64, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x22, 0x2f, 0x0a, 0x07, 0x53,
	0x79, 0x6e, 0x63, 0x41, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1f, 0x0a, 0x0b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x73, 0x0a,
	0x07, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x41, 0x72,
	0x67, 0x73, 0x22, 0x1d, 0x0a, 0x07, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x41, 0x72, 0x67,
	0x73, 0x22, 0x5b, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x12, 0x1f,
	0x0a, 0x03, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x03, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x0c, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1d,
	0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x1c, 0x0a,
	0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x74, 0x72, 0x22, 0x22, 0x0a, 0x0c, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x6e, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x78, 0x32,
	0xea, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x70, 0x63, 0x12, 0x1c, 0x0a,
	0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x08, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x05, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x07, 0x55,
	0x6e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x22, 0x0a, 0x0a, 0x55, 0x6e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x09, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x0b, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x30, 0x01, 0x32, 0xd0, 0x01, 0x0a,
	0x07, 0x50, 0x65, 0x65, 0x72, 0x52, 0x70, 0x63, 0x12, 0x26, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x20, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x41,
	0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x1a, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x73, 0x67, 0x28, 0x01, 0x30, 0x01, 0x12, 0x2b,
	0x0a, 0x09, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x07, 0x55,
	0x6e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42,
	0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_proto_rawDescOnce sync.Once
	file_rpc_proto_rawDescData = file_rpc_proto_rawDesc
)

func file_rpc_proto_rawDescGZIP() []byte {
	file_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_proto_rawDescData)
	})
	return file_rpc_proto_rawDescData
}

var file_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_rpc_proto_goTypes = []interface{}{
	(*Empty)(nil),        // 0: pb.Empty
	(*RegisterReq)(nil),  // 1: pb.RegisterReq
	(*RegisterAck)(nil),  // 2: pb.RegisterAck
	(*MountReq)(nil),     // 3: pb.MountReq
	(*SyncReq)(nil),      // 4: pb.SyncReq
	(*MountLogItem)(nil), // 5: pb.MountLogItem
	(*SyncAck)(nil),      // 6: pb.SyncAck
	(*CheckNumReq)(nil),  // 7: pb.CheckNumReq
	(*CallReq)(nil),      // 8: pb.CallReq
	(*CallAck)(nil),      // 9: pb.CallAck
	(*StreamMsg)(nil),    // 10: pb.StreamMsg
	(*Bytes)(nil),        // 11: pb.Bytes
	(*NodeName)(nil),     // 12: pb.NodeName
	(*MountTimeAck)(nil), // 13: pb.MountTimeAck
}
var file_rpc_proto_depIdxs = []int32{
	5,  // 0: pb.SyncAck.List:type_name -> pb.MountLogItem
	8,  // 1: pb.StreamMsg.Req:type_name -> pb.CallReq
	11, // 2: pb.StreamMsg.Data:type_name -> pb.Bytes
	0,  // 3: pb.MasterRpc.Ping:input_type -> pb.Empty
	1,  // 4: pb.MasterRpc.Register:input_type -> pb.RegisterReq
	3,  // 5: pb.MasterRpc.Mount:input_type -> pb.MountReq
	3,  // 6: pb.MasterRpc.UnMount:input_type -> pb.MountReq
	0,  // 7: pb.MasterRpc.UnMountAll:input_type -> pb.Empty
	4,  // 8: pb.MasterRpc.Sync:input_type -> pb.SyncReq
	7,  // 9: pb.PeerRpc.CheckNum:input_type -> pb.CheckNumReq
	8,  // 10: pb.PeerRpc.Call:input_type -> pb.CallReq
	10, // 11: pb.PeerRpc.Stream:input_type -> pb.StreamMsg
	12, // 12: pb.PeerRpc.MountTime:input_type -> pb.NodeName
	12, // 13: pb.PeerRpc.UnMount:input_type -> pb.NodeName
	0,  // 14: pb.MasterRpc.Ping:output_type -> pb.Empty
	2,  // 15: pb.MasterRpc.Register:output_type -> pb.RegisterAck
	0,  // 16: pb.MasterRpc.Mount:output_type -> pb.Empty
	0,  // 17: pb.MasterRpc.UnMount:output_type -> pb.Empty
	0,  // 18: pb.MasterRpc.UnMountAll:output_type -> pb.Empty
	5,  // 19: pb.MasterRpc.Sync:output_type -> pb.MountLogItem
	0,  // 20: pb.PeerRpc.CheckNum:output_type -> pb.Empty
	9,  // 21: pb.PeerRpc.Call:output_type -> pb.CallAck
	10, // 22: pb.PeerRpc.Stream:output_type -> pb.StreamMsg
	13, // 23: pb.PeerRpc.MountTime:output_type -> pb.MountTimeAck
	0,  // 24: pb.PeerRpc.UnMount:output_type -> pb.Empty
	14, // [14:25] is the sub-list for method output_type
	3,  // [3:14] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_rpc_proto_init() }
func file_rpc_proto_init() {
	if File_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountLogItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckNumReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountTimeAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rpc_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*StreamMsg_Req)(nil),
		(*StreamMsg_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_proto_depIdxs,
		MessageInfos:      file_rpc_proto_msgTypes,
	}.Build()
	File_rpc_proto = out.File
	file_rpc_proto_rawDesc = nil
	file_rpc_proto_goTypes = nil
	file_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MasterRpcClient is the client API for MasterRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterRpcClient interface {
	// 心跳
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterAck, error)
	// 挂载节点
	Mount(ctx context.Context, in *MountReq, opts ...grpc.CallOption) (*Empty, error)
	// 移除节点
	UnMount(ctx context.Context, in *MountReq, opts ...grpc.CallOption) (*Empty, error)
	// 移除所有节点
	UnMountAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// 同步挂载点
	Sync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (MasterRpc_SyncClient, error)
}

type masterRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterRpcClient(cc grpc.ClientConnInterface) MasterRpcClient {
	return &masterRpcClient{cc}
}

func (c *masterRpcClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.MasterRpc/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRpcClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterAck, error) {
	out := new(RegisterAck)
	err := c.cc.Invoke(ctx, "/pb.MasterRpc/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRpcClient) Mount(ctx context.Context, in *MountReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.MasterRpc/Mount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRpcClient) UnMount(ctx context.Context, in *MountReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.MasterRpc/UnMount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRpcClient) UnMountAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.MasterRpc/UnMountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRpcClient) Sync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (MasterRpc_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MasterRpc_serviceDesc.Streams[0], "/pb.MasterRpc/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterRpcSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MasterRpc_SyncClient interface {
	Recv() (*MountLogItem, error)
	grpc.ClientStream
}

type masterRpcSyncClient struct {
	grpc.ClientStream
}

func (x *masterRpcSyncClient) Recv() (*MountLogItem, error) {
	m := new(MountLogItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MasterRpcServer is the server API for MasterRpc service.
type MasterRpcServer interface {
	// 心跳
	Ping(context.Context, *Empty) (*Empty, error)
	// 注册
	Register(context.Context, *RegisterReq) (*RegisterAck, error)
	// 挂载节点
	Mount(context.Context, *MountReq) (*Empty, error)
	// 移除节点
	UnMount(context.Context, *MountReq) (*Empty, error)
	// 移除所有节点
	UnMountAll(context.Context, *Empty) (*Empty, error)
	// 同步挂载点
	Sync(*SyncReq, MasterRpc_SyncServer) error
}

// UnimplementedMasterRpcServer can be embedded to have forward compatible implementations.
type UnimplementedMasterRpcServer struct {
}

func (*UnimplementedMasterRpcServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedMasterRpcServer) Register(context.Context, *RegisterReq) (*RegisterAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedMasterRpcServer) Mount(context.Context, *MountReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (*UnimplementedMasterRpcServer) UnMount(context.Context, *MountReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnMount not implemented")
}
func (*UnimplementedMasterRpcServer) UnMountAll(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnMountAll not implemented")
}
func (*UnimplementedMasterRpcServer) Sync(*SyncReq, MasterRpc_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

func RegisterMasterRpcServer(s *grpc.Server, srv MasterRpcServer) {
	s.RegisterService(&_MasterRpc_serviceDesc, srv)
}

func _MasterRpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MasterRpc/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRpcServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRpc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRpcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MasterRpc/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRpcServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRpc_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRpcServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MasterRpc/Mount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRpcServer).Mount(ctx, req.(*MountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRpc_UnMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRpcServer).UnMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MasterRpc/UnMount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRpcServer).UnMount(ctx, req.(*MountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRpc_UnMountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRpcServer).UnMountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MasterRpc/UnMountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRpcServer).UnMountAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRpc_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MasterRpcServer).Sync(m, &masterRpcSyncServer{stream})
}

type MasterRpc_SyncServer interface {
	Send(*MountLogItem) error
	grpc.ServerStream
}

type masterRpcSyncServer struct {
	grpc.ServerStream
}

func (x *masterRpcSyncServer) Send(m *MountLogItem) error {
	return x.ServerStream.SendMsg(m)
}

var _MasterRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MasterRpc",
	HandlerType: (*MasterRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MasterRpc_Ping_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _MasterRpc_Register_Handler,
		},
		{
			MethodName: "Mount",
			Handler:    _MasterRpc_Mount_Handler,
		},
		{
			MethodName: "UnMount",
			Handler:    _MasterRpc_UnMount_Handler,
		},
		{
			MethodName: "UnMountAll",
			Handler:    _MasterRpc_UnMountAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _MasterRpc_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// PeerRpcClient is the client API for PeerRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerRpcClient interface {
	CheckNum(ctx context.Context, in *CheckNumReq, opts ...grpc.CallOption) (*Empty, error)
	// 远程调用
	Call(ctx context.Context, in *CallReq, opts ...grpc.CallOption) (*CallAck, error)
	// 双向流抽象
	Stream(ctx context.Context, opts ...grpc.CallOption) (PeerRpc_StreamClient, error)
	// 挂载时间
	MountTime(ctx context.Context, in *NodeName, opts ...grpc.CallOption) (*MountTimeAck, error)
	// 取消挂载
	UnMount(ctx context.Context, in *NodeName, opts ...grpc.CallOption) (*Empty, error)
}

type peerRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerRpcClient(cc grpc.ClientConnInterface) PeerRpcClient {
	return &peerRpcClient{cc}
}

func (c *peerRpcClient) CheckNum(ctx context.Context, in *CheckNumReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.PeerRpc/CheckNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerRpcClient) Call(ctx context.Context, in *CallReq, opts ...grpc.CallOption) (*CallAck, error) {
	out := new(CallAck)
	err := c.cc.Invoke(ctx, "/pb.PeerRpc/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerRpcClient) Stream(ctx context.Context, opts ...grpc.CallOption) (PeerRpc_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PeerRpc_serviceDesc.Streams[0], "/pb.PeerRpc/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerRpcStreamClient{stream}
	return x, nil
}

type PeerRpc_StreamClient interface {
	Send(*StreamMsg) error
	Recv() (*StreamMsg, error)
	grpc.ClientStream
}

type peerRpcStreamClient struct {
	grpc.ClientStream
}

func (x *peerRpcStreamClient) Send(m *StreamMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerRpcStreamClient) Recv() (*StreamMsg, error) {
	m := new(StreamMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peerRpcClient) MountTime(ctx context.Context, in *NodeName, opts ...grpc.CallOption) (*MountTimeAck, error) {
	out := new(MountTimeAck)
	err := c.cc.Invoke(ctx, "/pb.PeerRpc/MountTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerRpcClient) UnMount(ctx context.Context, in *NodeName, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.PeerRpc/UnMount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerRpcServer is the server API for PeerRpc service.
type PeerRpcServer interface {
	CheckNum(context.Context, *CheckNumReq) (*Empty, error)
	// 远程调用
	Call(context.Context, *CallReq) (*CallAck, error)
	// 双向流抽象
	Stream(PeerRpc_StreamServer) error
	// 挂载时间
	MountTime(context.Context, *NodeName) (*MountTimeAck, error)
	// 取消挂载
	UnMount(context.Context, *NodeName) (*Empty, error)
}

// UnimplementedPeerRpcServer can be embedded to have forward compatible implementations.
type UnimplementedPeerRpcServer struct {
}

func (*UnimplementedPeerRpcServer) CheckNum(context.Context, *CheckNumReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNum not implemented")
}
func (*UnimplementedPeerRpcServer) Call(context.Context, *CallReq) (*CallAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (*UnimplementedPeerRpcServer) Stream(PeerRpc_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (*UnimplementedPeerRpcServer) MountTime(context.Context, *NodeName) (*MountTimeAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountTime not implemented")
}
func (*UnimplementedPeerRpcServer) UnMount(context.Context, *NodeName) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnMount not implemented")
}

func RegisterPeerRpcServer(s *grpc.Server, srv PeerRpcServer) {
	s.RegisterService(&_PeerRpc_serviceDesc, srv)
}

func _PeerRpc_CheckNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerRpcServer).CheckNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PeerRpc/CheckNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerRpcServer).CheckNum(ctx, req.(*CheckNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerRpc_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerRpcServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PeerRpc/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerRpcServer).Call(ctx, req.(*CallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerRpc_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerRpcServer).Stream(&peerRpcStreamServer{stream})
}

type PeerRpc_StreamServer interface {
	Send(*StreamMsg) error
	Recv() (*StreamMsg, error)
	grpc.ServerStream
}

type peerRpcStreamServer struct {
	grpc.ServerStream
}

func (x *peerRpcStreamServer) Send(m *StreamMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerRpcStreamServer) Recv() (*StreamMsg, error) {
	m := new(StreamMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PeerRpc_MountTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerRpcServer).MountTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PeerRpc/MountTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerRpcServer).MountTime(ctx, req.(*NodeName))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerRpc_UnMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerRpcServer).UnMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PeerRpc/UnMount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerRpcServer).UnMount(ctx, req.(*NodeName))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeerRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PeerRpc",
	HandlerType: (*PeerRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckNum",
			Handler:    _PeerRpc_CheckNum_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _PeerRpc_Call_Handler,
		},
		{
			MethodName: "MountTime",
			Handler:    _PeerRpc_MountTime_Handler,
		},
		{
			MethodName: "UnMount",
			Handler:    _PeerRpc_UnMount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _PeerRpc_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
